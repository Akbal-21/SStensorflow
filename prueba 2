//import * as tf from "@tensorflow/tfjs";
import { browser, GraphModel, loadGraphModel } from "@tensorflow/tfjs";
import { useRef } from "react";
import CanvasDraw from "react-canvas-draw";

const modelPath = "/home/fernando/Escritorio/sstensorflow/model/model.json";

export default function Home() {
	//Se creaan los estados del modelo de prediccion
	// const [model, setModel] = useState<GraphModel>();
	// const [prediction, setPrediction] = useState<number>();

	const modelRef = useRef<GraphModel>();
	const canvasRef = useRef<CanvasDraw>(null);

	const loadModel = async () => {
		modelRef.current = await loadGraphModel("model.json");
	};

	// const [imageUrl, setImageUrl] = useState("");

	const handleSave = async () => {
		const canvas = canvasRef.current?.getSaveData;
		if (!canvas) {
			return
		}
		const img = new Image()
		img.src = canvas.toString();

		const digit = await recognizeDigit(img);
		console.log("El dÃ­gito reconocido es:", digit);

	};

	const recognizeDigit = async (img: HTMLImageElement) => {
    const tensor = browser.fromPixels(img, 1).expandDims(0);
    const prediction = modelRef.current?.predict(tensor);
    const digit = prediction?.argMax(1).dataSync()[0];
    return digit;
  };


	const handleclear = () => {};
	return (
		<>
			<div>
				<CanvasDraw />
			</div>
			<div style={{ margin: "5px" }}>
				<button onClick={handleSave}>Guardar</button>
				<button onClick={handleclear}>Limpiar</button>
			</div>
			<div>
				{/* {imageUrl && (
					<Image src={imageUrl} alt="signature" width={50} height={50} />
				)} */}
			</div>
		</>
	);
}
